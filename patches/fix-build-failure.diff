diff -u sks-1.1.6.orig/eventloop.ml sks-1.1.6/eventloop.ml
--- sks-1.1.6.orig/eventloop.ml	2013-12-09 20:20:10.000000000 -0500
+++ sks-1.1.6/eventloop.ml	2020-10-16 02:15:20.964893900 -0400
@@ -26,6 +26,7 @@
 open Printf
 open Common
 open Packet
+let unix_socket = Unix.socket
 module Unix = UnixLabels
 open Unix
 
@@ -129,7 +130,7 @@
     let domain =
       Unix.domain_of_sockaddr addr in
     let sock =
-      socket ~domain ~kind:SOCK_STREAM ~protocol:0 in
+      unix_socket domain SOCK_STREAM 0 in
     setsockopt sock SO_REUSEADDR true;
     if domain = PF_INET6 then
       setsockopt sock IPV6_ONLY true;
diff -u sks-1.1.6.orig/reconComm.ml sks-1.1.6/reconComm.ml
--- sks-1.1.6.orig/reconComm.ml	2013-11-14 15:29:13.000000000 -0500
+++ sks-1.1.6/reconComm.ml	2020-10-16 02:15:21.003911900 -0400
@@ -26,6 +26,7 @@
 open Common
 open Packet
 
+let unix_socket = Unix.socket
 module Unix = UnixLabels
 module Map = PMap.Map
 
@@ -37,10 +38,10 @@
 
 (** send DbMessages message and wait for response *)
 let send_dbmsg msg =
-  let s = Unix.socket
-            ~domain:(Unix.domain_of_sockaddr db_command_addr)
-            ~kind:Unix.SOCK_STREAM
-            ~protocol:0 in
+  let s = unix_socket
+            (Unix.domain_of_sockaddr db_command_addr)
+            Unix.SOCK_STREAM
+            0 in
   protect ~f:(fun () ->
                 Unix.connect s ~addr:db_command_addr;
                 let cin = Channel.sys_in_from_fd s in
@@ -54,10 +55,10 @@
 
 (** send DbMessages message, don't wait for response *)
 let send_dbmsg_noreply msg =
-  let s = Unix.socket
-            ~domain:(Unix.domain_of_sockaddr db_command_addr)
-            ~kind:Unix.SOCK_STREAM
-            ~protocol:0 in
+  let s = unix_socket
+            (Unix.domain_of_sockaddr db_command_addr)
+            Unix.SOCK_STREAM
+            0 in
   protect ~f:(fun () ->
                 Unix.connect s ~addr:db_command_addr;
                 let cout = Channel.sys_out_from_fd s in
@@ -75,10 +76,10 @@
 let http_status_ok_regexp = Str.regexp "^HTTP/[0-9]+\\.[0-9]+ 2"
 
 let get_keystrings_via_http addr hashes =
-  let s = Unix.socket
-            ~domain:(Unix.domain_of_sockaddr addr)
-            ~kind:Unix.SOCK_STREAM
-            ~protocol:0  in
+  let s = unix_socket
+            (Unix.domain_of_sockaddr addr)
+            Unix.SOCK_STREAM
+            0  in
   protect ~f:(fun () ->
                 Unix.bind s ~addr:(match_client_recon_addr addr);
                 Unix.connect s ~addr;
diff -u sks-1.1.6.orig/sks_do.ml sks-1.1.6/sks_do.ml
--- sks-1.1.6.orig/sks_do.ml	2013-11-14 15:29:13.000000000 -0500
+++ sks-1.1.6/sks_do.ml	2020-10-16 02:15:21.026897200 -0400
@@ -27,6 +27,7 @@
 open Common
 open Packet
 open DbMessages
+let unix_socket = Unix.socket
 module Unix = UnixLabels
 module PTree = PrefixTree
 module Map = PMap.Map
@@ -37,10 +38,10 @@
   exit (-1)
 
 let send_dbmsg msg =
-  let s = Unix.socket
-            ~domain:(Unix.domain_of_sockaddr db_command_addr)
-            ~kind:Unix.SOCK_STREAM
-            ~protocol:0 in
+  let s = unix_socket
+            (Unix.domain_of_sockaddr db_command_addr)
+            Unix.SOCK_STREAM
+            0 in
   protect ~f:(fun () ->
                 Unix.connect s ~addr:db_command_addr;
                 let cin = Channel.sys_in_from_fd s in
diff -u sks-1.1.6.orig/tester.ml sks-1.1.6/tester.ml
--- sks-1.1.6.orig/tester.ml	2013-11-14 15:29:13.000000000 -0500
+++ sks-1.1.6/tester.ml	2020-10-16 02:15:21.067896200 -0400
@@ -26,6 +26,7 @@
 open Common
 open Packet
 open DbMessages
+let unix_socket = Unix.socket
 module Unix = UnixLabels
 
 let settings = {
@@ -46,10 +47,10 @@
 
 
 let send_msg addr msg =
-  let s = Unix.socket
-            ~domain:(Unix.domain_of_sockaddr addr)
-            ~kind:Unix.SOCK_STREAM
-            ~protocol:0 in
+  let s = unix_socket
+            (Unix.domain_of_sockaddr addr)
+            Unix.SOCK_STREAM
+            0 in
   protect ~f:( fun () ->
                  Unix.connect s ~addr:addr;
                  let cin = Channel.sys_in_from_fd s
@@ -62,10 +63,10 @@
     ~finally:(fun () -> Unix.close s)
 
 let send_msg_noreply addr msg =
-  let s = Unix.socket
-            ~domain:(Unix.domain_of_sockaddr addr)
-            ~kind:Unix.SOCK_STREAM
-            ~protocol:0 in
+  let s = unix_socket
+            (Unix.domain_of_sockaddr addr)
+            Unix.SOCK_STREAM
+            0 in
   protect ~f:(fun () ->
                 Unix.connect s ~addr:addr;
                 let cout = Channel.sys_out_from_fd s in
