diff -u sks-1.1.6.orig/add_mail.ml sks-1.1.6/add_mail.ml
--- sks-1.1.6.orig/add_mail.ml	2013-11-14 15:29:13.000000000 -0500
+++ sks-1.1.6/add_mail.ml	2020-10-16 02:30:45.797056200 -0400
@@ -54,7 +54,7 @@
 (** dumps contents of one file into another *)
 let pipe_file =
   let blocksize = 100 * 1024 in
-  let buf = String.create blocksize in
+  let buf = Bytes.create blocksize in
   let rec pipe_file file1 file2 =
     let bytes_read = input file1 buf 0 blocksize in
     if bytes_read <> 0 then (
Common subdirectories: sks-1.1.6.orig/bdb and sks-1.1.6/bdb
diff -u sks-1.1.6.orig/bitstring.ml sks-1.1.6/bitstring.ml
--- sks-1.1.6.orig/bitstring.ml	2013-11-14 15:29:13.000000000 -0500
+++ sks-1.1.6/bitstring.ml	2020-10-16 02:30:45.814049300 -0400
@@ -40,7 +40,7 @@
 let create bits =
   let bytes = bytelength bits
   in
-  { a = String.create bytes;
+  { a = Bytes.create bytes;
     bitlength = bits;
   }
 
@@ -58,7 +58,7 @@
   let intval = int_of_char (String.get ba.a byte_pos) in
   let new_char = char_of_int ((1 lsl (width - bit_pos - 1)) lxor intval)
   in
-  String.set ba.a byte_pos new_char
+  Bytes.set ba.a byte_pos new_char
 
 let set ba bit =
   let byte_pos = bit / width
@@ -66,7 +66,7 @@
   let intval = int_of_char (String.get ba.a byte_pos) in
   let new_char = char_of_int ((1 lsl (width - bit_pos - 1)) lor intval)
   in
-  String.set ba.a byte_pos new_char
+  Bytes.set ba.a byte_pos new_char
 
 let unset ba bit =
   let byte_pos = bit / width
@@ -75,7 +75,7 @@
   let new_char = char_of_int ((lnot (1 lsl (width - bit_pos - 1)))
                               land intval)
   in
-  String.set ba.a byte_pos new_char
+  Bytes.set ba.a byte_pos new_char
 
 let setval ba bit bool =
   if bool then set ba bit else unset ba bit
@@ -98,9 +98,9 @@
   Array.init ~f:(fun i -> lget ba i) ba.bitlength
 
 let to_string ba =
-  let string = String.create ba.bitlength in
+  let string = Bytes.create ba.bitlength in
   for i = 0 to ba.bitlength -1 do
-    if get ba i = 0 then string.[i] <- '0' else string.[i] <- '1'
+    if get ba i = 0 then Bytes.set string i '0' else Bytes.set string i '1'
   done;
   string
 
@@ -160,7 +160,7 @@
  *)
 let copy_len ba bitlength =
   let bytes = bytelength bitlength in
-  let str = String.create bytes in
+  let str = Bytes.create bytes in
   String.blit ~src:ba.a ~src_pos:0
     ~dst:str ~dst_pos:0 ~len:(String.length ba.a);
   { a = str; bitlength = bitlength }
@@ -191,17 +191,17 @@
   if bits > 0 then
     let bytes = bytelength ba.bitlength in
     for i = 0 to bytes-2 do
-      ba.a.[i] <- shift_pair_left ba.a.[i] ba.a.[i+1] bits
+      Bytes.set ba.a i (shift_pair_left ba.a.[i] ba.a.[i+1] bits)
     done;
-    ba.a.[bytes-1] <- shift_pair_left ba.a.[bytes-1] '\000' bits
+    Bytes.set ba.a (bytes-1) (shift_pair_left ba.a.[bytes-1] '\000' bits)
 
 let shift_right_small ba bits =
   if bits > 0 then
     let bytes = bytelength ba.bitlength in
     for i = bytes-1 downto 1 do
-      ba.a.[i] <- shift_pair_right ba.a.[i-1] ba.a.[i] bits
+      Bytes.set ba.a i (shift_pair_right ba.a.[i-1] ba.a.[i] bits)
     done;
-    ba.a.[0] <-  shift_pair_right '\000' ba.a.[0] bits
+    Bytes.set ba.a 0 (shift_pair_right '\000' ba.a.[0] bits)
 
 (**********************************)
 
@@ -216,10 +216,10 @@
   then
     begin
       for i = 0 to bytelength - 1 - bytes do
-        ba.a.[i] <- ba.a.[i+bytes];
+        Bytes.set ba.a i ba.a.[i+bytes];
       done;
       for i = bytelength - bytes to bytelength - 1 do
-        ba.a.[i] <- '\000'
+        Bytes.set ba.a i '\000'
       done
     end;
   shift_left_small ba bits
@@ -235,10 +235,10 @@
     then
       begin
         for i = bytelength - 1 downto bytes do
-          ba.a.[i] <- ba.a.[i-bytes];
+          Bytes.set ba.a i ba.a.[i-bytes];
         done;
         for i = bytes - 1 downto 0 do
-          ba.a.[i] <- '\000'
+          Bytes.set ba.a i '\000'
         done
       end;
     shift_right_small ba bits
@@ -275,14 +275,14 @@
     let newdst = (rmasks.(bitlen) land srcval) lor
                  ((lnot rmasks.(bitlen)) land dstval)
     in
-    dst.a.[bytelen] <- char_of_int newdst
+    Bytes.set dst.a bytelen (char_of_int newdst)
 
 
 (* let full_blit ~src ~src_pos ~dst ~dst_pos ~len =  *)
 
 
 let zero_out bs =
-  String.fill bs.a ~pos:0 ~len:(String.length bs.a) '\000'
+  Bytes.fill bs.a ~pos:0 ~len:(String.length bs.a) '\000'
 
 (*
 let extract bs ~pos ~len =
diff -u sks-1.1.6.orig/channel.ml sks-1.1.6/channel.ml
--- sks-1.1.6.orig/channel.ml	2013-11-14 15:29:13.000000000 -0500
+++ sks-1.1.6/channel.ml	2020-10-16 02:30:45.820050200 -0400
@@ -50,7 +50,7 @@
     let string =
       match !stringopt with
           None ->
-            let string = String.create len in
+            let string = Bytes.create len in
             stringopt := Some string;
             pos := 0;
             string
@@ -125,7 +125,7 @@
       None -> 1024 * 100
     | Some x -> x
   in
-  let sbuf = String.create len
+  let sbuf = Bytes.create len
   and buf = Buffer.create len in
     read_all_rec cin sbuf buf;
     Buffer.contents buf
@@ -167,7 +167,7 @@
   method virtual read_string_pos : buf:string -> pos:int -> len:int -> unit
   method virtual read_char : char
   method read_string len =
-    let buf = String.create len in
+    let buf = Bytes.create len in
     self#read_string_pos ~buf ~pos:0 ~len;
     buf
   method read_byte = int_of_char self#read_char
diff -u sks-1.1.6.orig/dbserver.ml sks-1.1.6/dbserver.ml
--- sks-1.1.6.orig/dbserver.ml	2014-03-08 11:05:53.000000000 -0500
+++ sks-1.1.6/dbserver.ml	2020-10-16 02:30:45.843058200 -0400
@@ -396,7 +396,7 @@
     let f = (if binary then open_in_bin else open_in) fname in
     protect ~f:(fun () ->
                   let length = in_channel_length f in
-                  let buf = String.create length in
+                  let buf = Bytes.create length in
                   really_input f buf 0 length;
                   buf
                )
diff -u sks-1.1.6.orig/heap.ml sks-1.1.6/heap.ml
--- sks-1.1.6.orig/heap.ml	2013-11-14 15:29:13.000000000 -0500
+++ sks-1.1.6/heap.ml	2020-10-16 02:30:45.849052900 -0400
@@ -146,7 +146,7 @@
 (***************************************************************)
 
 let empty cmp i =
-  { a = Array.create i None;
+  { a = Array.make i None;
     length = 0;
     minsize = i;
     cmp = cmp;
diff -u sks-1.1.6.orig/keyHash.ml sks-1.1.6/keyHash.ml
--- sks-1.1.6.orig/keyHash.ml	2013-11-14 15:29:13.000000000 -0500
+++ sks-1.1.6/keyHash.ml	2020-10-16 02:30:45.864061100 -0400
@@ -73,11 +73,11 @@
 
 let dehexify s =
   let s = String.uppercase s in
-  let ns = String.create (String.length s / 2) in (* new string *)
+  let ns = Bytes.create (String.length s / 2) in (* new string *)
   for i = 0 to String.length ns - 1 do
     let first = hexchar_to_int s.[2 * i]
     and second = hexchar_to_int s.[2 * i + 1]
     in
-    ns.[i] <- char_of_int ((first lsl 4) + second)
+    Bytes.set ns i (char_of_int ((first lsl 4) + second))
   done;
   ns
diff -u sks-1.1.6.orig/linearAlg.ml sks-1.1.6/linearAlg.ml
--- sks-1.1.6.orig/linearAlg.ml	2013-11-14 15:29:13.000000000 -0500
+++ sks-1.1.6/linearAlg.ml	2020-10-16 02:30:45.874070800 -0400
@@ -62,7 +62,7 @@
   let copy m = { m with array = Array.copy m.array; }
 
   let make ~columns ~rows init =
-    let array = Array.create (columns * rows) init in
+    let array = Array.make (columns * rows) init in
     { columns = columns;
       rows = rows;
       array = array;
diff -u sks-1.1.6.orig/mList.ml sks-1.1.6/mList.ml
--- sks-1.1.6.orig/mList.ml	2013-11-14 15:29:13.000000000 -0500
+++ sks-1.1.6/mList.ml	2020-10-16 02:30:45.891057000 -0400
@@ -200,7 +200,7 @@
   (low,exact,high)
 
 let has_dups list =
-  let slist = Sort.list (fun x y -> x < y) list in
+  let slist = List.sort compare list in
   let rec dup_scan list = match list with
     [] -> false
   | hd::[] -> false
@@ -208,7 +208,7 @@
   in dup_scan slist
 
 let dedup list =
-  let slist = Sort.list (fun x y -> x < y) list in
+  let slist = List.sort compare list in
   let rec dedup ~list ~partial = match list with
       [] -> partial
     | hd::[] -> dedup ~list:[] ~partial:(hd::partial)
diff -u sks-1.1.6.orig/number.ml sks-1.1.6/number.ml
--- sks-1.1.6.orig/number.ml	2013-11-14 15:29:13.000000000 -0500
+++ sks-1.1.6/number.ml	2020-10-16 02:30:45.920064400 -0400
@@ -60,9 +60,9 @@
 
 let revstring s =
   let len = String.length s in
-  let copy = String.create len in
+  let copy = Bytes.create len in
   for i = 0 to len - 1 do
-    copy.[i] <- s.[len - 1 - i]
+    Bytes.set copy i s.[len - 1 - i]
   done;
   copy
 
@@ -71,19 +71,19 @@
   for i = 0 to (len - 2)/2 do
     let j = len - 1 - i in
     let tmp = s.[i] in
-    s.[i] <- s.[j];
-    s.[j] <- tmp
+    Bytes.set s i s.[j];
+    Bytes.set s j tmp
   done
 
 let to_bytes ~nbytes n =
   if sign_big_int n = -1
   then raise (Invalid_argument "N.to_bytes: negative argument");
-  let string = String.create nbytes in
+  let string = Bytes.create nbytes in
   let rec loop n i =
     if i < 0 then string
     else
       let (a,b) = quomod_big_int n width_pow in
-      string.[i] <- char_of_int (int_of_big_int b);
+      Bytes.set string i (char_of_int (int_of_big_int b));
       loop a (i - 1)
   in
   let str = loop n (nbytes - 1) in
diff -u sks-1.1.6.orig/prefixTree.ml sks-1.1.6/prefixTree.ml
--- sks-1.1.6.orig/prefixTree.ml	2013-11-14 15:29:13.000000000 -0500
+++ sks-1.1.6/prefixTree.ml	2020-10-16 02:30:45.937059400 -0400
@@ -730,8 +730,8 @@
 let pad string bytes =
   let len = String.length string in
   if bytes > len then
-    let nstr = String.create bytes in
-    String.fill nstr ~pos:len ~len:(bytes - len) '\000';
+    let nstr = Bytes.create bytes in
+    Bytes.fill nstr ~pos:len ~len:(bytes - len) '\000';
     String.blit ~src:string ~dst:nstr ~src_pos:0 ~dst_pos:0 ~len;
     nstr
   else
diff -u sks-1.1.6.orig/rMisc.ml sks-1.1.6/rMisc.ml
--- sks-1.1.6.orig/rMisc.ml	2013-11-14 15:29:13.000000000 -0500
+++ sks-1.1.6/rMisc.ml	2020-10-16 02:30:45.953059700 -0400
@@ -56,15 +56,15 @@
     (* CR yminsky: I think this has the same bug as the function with the same name in Utils *)
     let _bits = rfunc () in
       for i = 0 to steps - 1 do
-        string.[pos + i] <-
-        char_of_int (0xFF land ((rfunc ()) lsr (8 * i)))
+        Bytes.set string (pos + i)
+        (char_of_int (0xFF land ((rfunc ()) lsr (8 * i))))
       done;
       fill_random_string rfunc string ~pos:(pos + steps) ~len
   else
     ()
 
 let random_string rfunc len =
-  let string = String.create len in
+  let string = Bytes.create len in
     fill_random_string rfunc string ~pos:0 ~len;
     string
 
@@ -124,8 +124,8 @@
 let pad string bytes =
   let len = String.length string in
   if bytes > len then
-    let nstr = String.create bytes in
-    String.fill nstr ~pos:len ~len:(bytes - len) '\000';
+    let nstr = Bytes.create bytes in
+    Bytes.fill nstr ~pos:len ~len:(bytes - len) '\000';
     String.blit ~src:string ~dst:nstr ~src_pos:0 ~dst_pos:0 ~len;
     nstr
   else
@@ -139,7 +139,7 @@
 let truncate string bytes =
   let len = String.length string in
   if bytes < len then
-    let nstr = String.create bytes in
+    let nstr = Bytes.create bytes in
     String.blit ~src:string ~dst:nstr ~src_pos:0 ~dst_pos:0 ~len:bytes;
     nstr
   else
@@ -160,7 +160,7 @@
 (** Printing Functions *)
 
 let print_ZZp_list list =
-  let list = Sort.list (fun x y -> compare x y < 0) list in
+  let list = List.sort compare list in
   MList.print2 ~f:ZZp.print list
 
 let print_ZZp_set set = print_ZZp_list (Set.elements set)
Common subdirectories: sks-1.1.6.orig/sampleConfig and sks-1.1.6/sampleConfig
Common subdirectories: sks-1.1.6.orig/sampleWeb and sks-1.1.6/sampleWeb
diff -u sks-1.1.6.orig/utils.ml sks-1.1.6/utils.ml
--- sks-1.1.6.orig/utils.ml	2013-11-14 15:29:13.000000000 -0500
+++ sks-1.1.6/utils.ml	2020-10-16 02:30:45.972056400 -0400
@@ -173,12 +173,12 @@
 let char_width = 8
 
 let hexstring digest =
-  let result = String.create (String.length digest * 2) in
-  let hex = "0123456789ABCDEF" in
+  let result = Bytes.create (String.length digest * 2) in
+  let hex = Bytes.of_string "0123456789ABCDEF" in
     for i = 0 to String.length digest - 1 do
       let c = Char.code digest.[i] in
-        result.[2*i] <- hex.[c lsr 4];
-        result.[2*i+1] <- hex.[c land 0xF]
+        Bytes.set result (2*i) hex.[c lsr 4];
+        Bytes.set result (2*i+1) hex.[c land 0xF]
     done;
     result
 
@@ -192,11 +192,11 @@
   int_from_bstring_rec string ~pos ~len 0
 
 let bstring_of_int i =
-     let s = String.create 4 in
-     s.[3] <- char_of_int (i land 0xFF);
-     s.[2] <- char_of_int ((i lsr 8) land 0xFF);
-     s.[1] <- char_of_int ((i lsr 16) land 0xFF);
-     s.[0] <- char_of_int ((i lsr 24) land 0xFF);
+     let s = Bytes.create 4 in
+     Bytes.set s 3 (char_of_int (i land 0xFF));
+     Bytes.set s 2 (char_of_int ((i lsr 8) land 0xFF));
+     Bytes.set s 1 (char_of_int ((i lsr 16) land 0xFF));
+     Bytes.set s 0 (char_of_int ((i lsr 24) land 0xFF));
      s
 
 (* tail recursive *)
@@ -265,15 +265,15 @@
        the random generation being deterministic *)
     let _bits = rfunc () in
     for i = 0 to steps - 1 do
-      string.[pos + i] <-
-        char_of_int (0xFF land ((rfunc ()) lsr (8 * i)))
+      Bytes.set string (pos + i)
+        (char_of_int (0xFF land ((rfunc ()) lsr (8 * i))))
     done;
     fill_random_string rfunc string ~pos:(pos + steps) ~len
   else
     ()
 
 let random_string rfunc len =
-  let string = String.create len in
+  let string = Bytes.create len in
     fill_random_string rfunc string ~pos:0 ~len;
     string
 
diff -u sks-1.1.6.orig/wserver.ml sks-1.1.6/wserver.ml
--- sks-1.1.6.orig/wserver.ml	2014-05-03 15:16:02.000000000 -0400
+++ sks-1.1.6/wserver.ml	2020-10-16 02:30:45.988059200 -0400
@@ -75,9 +75,9 @@
         match s.[i] with
           '%' when i + 2 < String.length s ->
             let v = hexa_val s.[i + 1] * 16 + hexa_val s.[i + 2] in
-            s1.[i1] <- Char.chr v; i + 3
-        | '+' -> s1.[i1] <- ' '; succ i
-        | x -> s1.[i1] <- x; succ i
+            Bytes.set s1 i1 (Char.chr v); i + 3
+        | '+' -> Bytes.set s1 i1 ' '; succ i
+        | x -> Bytes.set s1 i1 x; succ i
       in
       copy_decode_in s1 i (succ i1)
     else s1
@@ -95,7 +95,7 @@
   in
   if need_decode 0 then
     let len = compute_len 0 0 in
-    let s1 = String.create len in
+    let s1 = Bytes.create len in
     strip_heading_and_trailing_spaces (copy_decode_in s1 0 0)
   else s
 
@@ -120,22 +120,22 @@
     if i < String.length s then
       let i1 =
         match s.[i] with
-          ' ' -> s1.[i1] <- '+'; succ i1
+          ' ' -> Bytes.set s1 i1 '+'; succ i1
         | c ->
             if special c then
               begin
-                s1.[i1] <- '%';
-                s1.[i1 + 1] <- hexa_digit (Char.code c / 16);
-                s1.[i1 + 2] <- hexa_digit (Char.code c mod 16);
+                Bytes.set s1 i1 '%';
+                Bytes.set s1 (i1 + 1) (hexa_digit (Char.code c / 16));
+                Bytes.set s1 (i1 + 2) (hexa_digit (Char.code c mod 16));
                 i1 + 3
               end
-            else begin s1.[i1] <- c; succ i1 end
+            else begin Bytes.set s1 i1 c; succ i1 end
       in
       copy_code_in s1 (succ i) i1
     else s1
   in
   if need_code 0 then
-    let len = compute_len 0 0 in copy_code_in (String.create len) 0 0
+    let len = compute_len 0 0 in copy_code_in (Bytes.create len) 0 0
   else s
 
 let stripchars = Set.of_list [ ' '; '\t'; '\n'; '\r' ]
@@ -180,7 +180,7 @@
     if len > max_post_length
     then raise (Entity_too_large (sprintf "POST data too long: %f megs"
                               (float len /. 1024. /. 1024.)));
-    let rest = String.create len in
+    let rest = Bytes.create len in
     really_input cin rest 0 len;
     rest
   with
